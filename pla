#!/usr/bin/python3

import sys
import getopt
import numpy as np
import matplotlib.pyplot as plt

Config={}

def warn(msg):
  print("WARN : {0}".format(msg))

def fatal(msg):
  print("FATAL: {0}".format(msg))
  sys.exit(1)

def plotRawKeys():
  x = range(0, len(Config['RAW_KEYS']))
  # because raw key values so high, offset by min key
  min = Config['RAW_KEYS'][0]
  y=[]
  for val in Config['RAW_KEYS']: 
    y.append(val-min)
  plt.scatter(x, y)
  plt.title('Rank v. Key')
  plt.xlabel('Rank')
  plt.ylabel('Raw Key value - {0}'.format(min))
  plt.show()

def usageAndExit():
  print
  print("usage: pla [-f <file> -p <int> -e <int> -r -v]")
  print
  print("       -f <file>   string key <file> one per line. default '{0}'".format(Config['KEY_FILE']))
  print("       -p <int>    maximum key size 's' in characters 1<=s<=16. default {0}".format(Config['MAX_KEY_SIZE']))
  print("       -e <int>    epsilon error 'e' for linear apporximation 1<=e<=256. Must be power of 2. default {0}".format(Config['EPSILON']))
  print("       -r          graph raw input integer keys; close graph window to continue")
  print("       -v          verbose mode . repeat for more detail");
  print
  sys.exit(2)

def parseCommandLine():
  global Config
  try:
    opts, args = getopt.getopt(sys.argv[1:],"f:p:e:vr")
    for o, a in opts:
      if o in ('-f'):
        Config['KEY_FILE']=a
      elif o in ('-p'):
        val = int(a)
        if val<1 or val>16:
          usageAndExit()
        Config['MAX_KEY_SIZE']=val
      elif o in ('-e'):
        val = int(a)
        if val<1 or val>256:
          usageAndExit()
        ok = val & (val-1)
        if ok!=0:
          usageAndExit()
        Config['EPSILON']=4
      elif o in ('-v'):
        Config['VERBOSE']=Config['VERBOSE']+1
      elif o in ('-r'):
        Config['PLOT_RAW_KEYS']=True
      else:
        usageAndExit()
  except (getopt.error):
    usageAndExit()
  except ValueError as e:
    print(e)
    usageAndExit()

  try:
    Config['FIN'] = open(Config['KEY_FILE'], "r")
  except IOError as e:
    print(e)
    usageAndExit()

  if Config['FIN'] is None:
    usageAndExit()

  if Config['VERBOSE']==True:
    print(Config)

def strintToInteger(key):
  l = len(key)

  if l==0:
    fatal("key '{0}' empty".format(key))

  if l>Config['MAX_KEY_SIZE']:
    l = Config['MAX_KEY_SIZE']

  i=0
  valHexArray=[]

  while i<l:
    valHexArray.append("%02x" % ord(key[i]))
    i=i+1

  hex = "".join(valHexArray)
  val = int(hex, 16)

  if Config['VERBOSE']==True:
    print("key={0} base16=0x{1} base10={2}".format(key, hex, val))

  return val

def readKeys():
  global Config

  last=0
  rawKeys=[]
  readOne=False
  for line in Config['FIN']:
    val = strintToInteger(line.strip())
    if readOne==False:
      readOne=True
      last = val
    elif val<=last:
      fatal("keys not unqiue sorted: '{0}' value {1} <= {2} last key".format(line.strip(), val, last))
    rawKeys.append(strintToInteger(line.strip()))
  Config['RAW_KEYS']=rawKeys

def setConfigDefaults():
  global Config
  # set defaults
  Config['FIN']=None
  Config['VERBOSE']=0
  Config['EPSILON']=4
  Config['RAW_KEYS']=[]
  Config['MAX_KEY_SIZE']=16
  Config['PLOT_RAW_KEYS']=False
  Config['KEY_FILE']='./poc.txt'

if __name__ == "__main__":
  setConfigDefaults()
  parseCommandLine()

  readKeys()

  if Config['PLOT_RAW_KEYS']==True:
    plotRawKeys()

